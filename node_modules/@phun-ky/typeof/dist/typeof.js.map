{"version":3,"file":"typeof.js","sources":["../src/main.ts"],"sourcesContent":["/**\n * Checks if the given variable is a string.\n *\n * @param {unknown} variable - The variable to check.\n * @returns {boolean} True if the variable is a string, false otherwise.\n */\nexport const isString = (variable: unknown): boolean =>\n  typeof variable === 'string';\n\n/**\n * Checks if the given variable is not a string.\n *\n * @param {unknown} variable - The variable to check.\n * @returns {boolean} True if the variable is not a string, false otherwise.\n */\nexport const isNotString = (variable: unknown): boolean => !isString(variable);\n\n/**\n * Checks if the given variable is a number.\n *\n * @param {unknown} variable - The variable to check.\n * @returns {boolean} True if the variable is a number, false otherwise.\n */\nexport const isNumber = (variable: unknown): boolean =>\n  typeof variable === 'number';\n\n/**\n * Checks if the given variable is not a number.\n *\n * @param {unknown} variable - The variable to check.\n * @returns {boolean} True if the variable is not a number, false otherwise.\n */\nexport const isNotNumber = (variable: unknown): boolean => !isNumber(variable);\n\n/**\n * Checks if the given variable is a boolean.\n *\n * @param {unknown} variable - The variable to check.\n * @returns {boolean} True if the variable is a boolean, false otherwise.\n */\nexport const isBoolean = (variable: unknown): boolean =>\n  typeof variable === 'boolean';\n\n/**\n * Checks if the given variable is not a boolean.\n *\n * @param {unknown} variable - The variable to check.\n * @returns {boolean} True if the variable is not a boolean, false otherwise.\n */\nexport const isNotBoolean = (variable: unknown): boolean =>\n  !isBoolean(variable);\n\n/**\n * Checks if the given variable is undefined.\n *\n * @param {unknown} variable - The variable to check.\n * @returns {boolean} True if the variable is undefined, false otherwise.\n */\nexport const isUndefined = (variable: unknown): boolean =>\n  typeof variable === 'undefined';\n\n/**\n * Checks if the given variable is not undefined.\n *\n * @param {unknown} variable - The variable to check.\n * @returns {boolean} True if the variable is not undefined, false otherwise.\n */\nexport const isNotUndefined = (variable: unknown): boolean =>\n  !isUndefined(variable);\n\n/**\n * Checks if a given value is a plain object.\n *\n * A plain object is an object created by the `{}` syntax, `Object.create(null)`,\n * or using `new Object()`. This function ensures that the value is an object\n * and does not have an unusual prototype chain.\n *\n * @param {unknown} value - The value to check.\n * @returns {boolean} `true` if the value is a plain object, otherwise `false`.\n *\n * @example\n * ```ts\n * console.log(isObjectStrict({})); // Output: true\n * console.log(isObjectStrict(Object.create(null))); // Output: true\n * console.log(isObjectStrict([])); // Output: false\n * console.log(isObjectStrict(new Date())); // Output: false\n * console.log(isObjectStrict(null)); // Output: false\n * ```\n *\n * **Features**\n * - ✅ Recognizes only **plain objects** (created via `{}`, `new Object()`, `Object.create(null)`, etc.).\n * - ❌ Rejects **arrays**, **functions**, **DOM elements**, **class instances**, and **custom objects** with modified constructors.\n *\n * **Behavior**\n * - ✅ `isObjectStrict({})` → `true`\n * - ❌ `isObjectStrict([])` → `false`\n * - ❌ `isObjectStrict(() => {})` → `false`\n * - ✅ `isObjectStrict(Object.create(null))` → `true`\n *\n * **When to use**\n * - Use `isObjectStrict` when you need a **strict check for plain objects**.\n * - Use `isObjectLoose` if you need to check if a value is an **object-like structure**, including functions.\n */\nexport const isObjectStrict = (value: unknown): boolean => {\n  if (typeof value !== 'object' || value === null) return false;\n\n  if (Object.prototype.toString.call(value) !== '[object Object]') return false;\n\n  const proto = Object.getPrototypeOf(value);\n\n  if (proto === null) return true;\n\n  const Ctor = Object.prototype.hasOwnProperty.call(proto, 'constructor')\n    ? proto.constructor\n    : null;\n\n  return (\n    typeof Ctor === 'function' &&\n    Ctor instanceof Ctor &&\n    Function.prototype.call(Ctor) === Function.prototype.call(value)\n  );\n};\n\n/**\n * Checks if a given value is an object or a function.\n *\n * This function verifies whether the provided value is of type `'object'` or `'function'`\n * while ensuring that `null` is excluded.\n *\n * @param {unknown} value - The value to check.\n * @returns {boolean} `true` if the value is an object or function, otherwise `false`.\n *\n * @example\n * ```ts\n * console.log(isObjectLoose({})); // Output: true\n * console.log(isObjectLoose([])); // Output: true\n * console.log(isObjectLoose(() => {})); // Output: true\n * console.log(isObjectLoose(null)); // Output: false\n * console.log(isObjectLoose(42)); // Output: false\n * ```\n *\n * **Features**\n * - ✅ Recognizes **all objects** (plain objects, arrays, functions, dates, etc.).\n * - ✅ Recognizes **functions** as objects (since functions are technically objects in JavaScript).\n * - ❌ Does **not** differentiate between plain objects and special objects (like arrays, functions, DOM nodes, etc.).\n *\n * **Behavior**\n * - ✅ `isObjectLoose({})` → `true`\n * - ✅ `isObjectLoose([])` → `true`\n * - ✅ `isObjectLoose(() => {})` → `true`\n * - ❌ `isObjectLoose(null)` → `false`\n *\n * **When to use**\n * - Use `isObjectStrict` when you need a **strict check for plain objects**.\n * - Use `isObjectLoose` if you need to check if a value is an **object-like structure**, including functions.\n *\n * **Comparison**\n * | Feature                | Strict Check (`isObjectStrict`) | Loose Check (`isObjectLoose`) |\n * |------------------------|----------------------|----------------------|\n * | Recognizes plain objects | ✅ Yes | ✅ Yes |\n * | Recognizes functions    | ❌ No | ✅ Yes |\n * | Recognizes arrays       | ❌ No | ✅ Yes |\n * | Recognizes `Object.create(null)` objects | ✅ Yes | ✅ Yes |\n * | Recognizes class instances | ❌ No | ✅ Yes |\n * | Recognizes DOM elements | ❌ No | ✅ Yes |\n * | Complexity             | 🔴 High | 🟢 Low |\n */\nexport const isObjectLoose = (value: unknown): boolean => {\n  const type = typeof value;\n\n  return value !== null && (type === 'object' || type === 'function');\n};\n\n/**\n * Checks if a given value is a class constructor.\n *\n * This function determines whether the provided value is a class by verifying\n * if it is a function and checking its prototype descriptor. Class constructors\n * always have a non-writable prototype, while regular functions do not.\n *\n * Will always return false on built in constructors like `Date` or `Array`.\n *\n * @param {unknown} value - The value to check.\n * @returns {boolean} `true` if the value is a class constructor, otherwise `false`.\n *\n * @example\n * ```ts\n * class MyClass {}\n * console.log(isClass(MyClass)); // Output: true\n *\n * function regularFunction() {}\n * console.log(isClass(regularFunction)); // Output: false\n *\n * console.log(isClass(() => {})); // Output: false\n * console.log(isClass(null)); // Output: false\n * ```\n */\nexport const isClass = (value: unknown): boolean => {\n  if (typeof value !== 'function') return false;\n\n  if (isBuiltInConstructor(value)) return false;\n\n  try {\n    // Check if the function has a valid prototype (classes always do)\n    const descriptor = Object.getOwnPropertyDescriptor(value, 'prototype');\n\n    return !!descriptor && !descriptor.writable; // Class prototypes are non-writable\n  } catch {\n    return false;\n  }\n};\n\n/**\n * Checks if a given value is a built-in JavaScript constructor.\n *\n * This function verifies whether the provided value is a function and matches\n * one of JavaScript's built-in constructors, such as `Object`, `Array`, `Function`, etc.\n *\n * @param {unknown} value - The value to check.\n * @returns {boolean} `true` if the value is a built-in constructor, otherwise `false`.\n *\n * @example\n * ```ts\n * console.log(isBuiltInConstructor(Object)); // Output: true\n * console.log(isBuiltInConstructor(Array)); // Output: true\n * console.log(isBuiltInConstructor(class MyClass {})); // Output: false\n * console.log(isBuiltInConstructor(() => {})); // Output: false\n * console.log(isBuiltInConstructor(123)); // Output: false\n * ```\n */\nexport const isBuiltInConstructor = (value: unknown): boolean => {\n  if (typeof value !== 'function') return false;\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\n  const builtins: Function[] = [\n    Object,\n    Array,\n    Function,\n    String,\n    Number,\n    Boolean,\n    Date,\n    RegExp,\n    Error,\n    EvalError,\n    RangeError,\n    ReferenceError,\n    SyntaxError,\n    TypeError,\n    URIError,\n    Map,\n    WeakMap,\n    Set,\n    WeakSet,\n    Promise,\n    BigInt,\n    Symbol\n  ];\n\n  return builtins.includes(value);\n};\n\n/**\n * Checks if a given value is an instance of a non-standard (unknown) class.\n *\n * This function determines whether the provided value is an object and has a prototype\n * that is neither `Object.prototype` (standard object) nor `null` (no prototype).\n * It helps differentiate between instances of custom classes and plain objects.\n *\n * @param {unknown} value - The value to check.\n * @returns {boolean} `true` if the value is an instance of a non-standard class, otherwise `false`.\n *\n * @example\n * ```ts\n * class MyClass {}\n * console.log(isInstanceOfUnknownClass(new MyClass())); // Output: true\n * console.log(isInstanceOfUnknownClass({})); // Output: false\n * console.log(isInstanceOfUnknownClass(Object.create(null))); // Output: false\n * console.log(isInstanceOfUnknownClass([])); // Output: true\n * ```\n */\nexport const isInstanceOfUnknownClass = (value: unknown): boolean =>\n  typeof value === 'object' &&\n  value !== null &&\n  Object.getPrototypeOf(value) !== Object.prototype &&\n  Object.getPrototypeOf(value) !== null;\n"],"names":["isString","variable","isNotString","isNumber","isNotNumber","isBoolean","isNotBoolean","isUndefined","isNotUndefined","isObjectStrict","value","Object","prototype","toString","call","proto","getPrototypeOf","Ctor","hasOwnProperty","constructor","Function","isObjectLoose","type","isClass","isBuiltInConstructor","descriptor","getOwnPropertyDescriptor","writable","Array","String","Number","Boolean","Date","RegExp","Error","EvalError","RangeError","ReferenceError","SyntaxError","TypeError","URIError","Map","WeakMap","Set","WeakSet","Promise","BigInt","Symbol","includes","isInstanceOfUnknownClass"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAMO,MAAMA,EAAYC,GACH,iBAAbA,EAQIC,EAAeD,IAAgCD,EAASC,GAQxDE,EAAYF,GACH,iBAAbA,EAQIG,EAAeH,IAAgCE,EAASF,GAQxDI,EAAaJ,GACJ,kBAAbA,EAQIK,EAAgBL,IAC1BI,EAAUJ,GAQAM,EAAeN,QACN,IAAbA,EAQIO,EAAkBP,IAC5BM,EAAYN,GAmCFQ,EAAkBC,IAC7B,GAAqB,iBAAVA,GAAgC,OAAVA,EAAgB,OAAO,EAExD,GAA8C,oBAA1CC,OAAOC,UAAUC,SAASC,KAAKJ,GAA8B,OAAO,EAExE,MAAMK,EAAQJ,OAAOK,eAAeN,GAEpC,GAAc,OAAVK,EAAgB,OAAO,EAE3B,MAAME,EAAON,OAAOC,UAAUM,eAAeJ,KAAKC,EAAO,eACrDA,EAAMI,YACN,KAEJ,MACkB,mBAATF,GACPA,aAAgBA,GAChBG,SAASR,UAAUE,KAAKG,KAAUG,SAASR,UAAUE,KAAKJ,EAAM,EAgDvDW,EAAiBX,IAC5B,MAAMY,SAAcZ,EAEpB,OAAiB,OAAVA,IAA4B,WAATY,GAA8B,aAATA,EAAoB,EA2BxDC,EAAWb,IACtB,GAAqB,mBAAVA,EAAsB,OAAO,EAExC,GAAIc,EAAqBd,GAAQ,OAAO,EAExC,IAEE,MAAMe,EAAad,OAAOe,yBAAyBhB,EAAO,aAE1D,QAASe,IAAeA,EAAWE,SACnC,MACA,OAAO,IAsBEH,EAAwBd,IACnC,GAAqB,mBAAVA,EAAsB,OAAO,EA4BxC,MAzB6B,CAC3BC,OACAiB,MACAR,SACAS,OACAC,OACAC,QACAC,KACAC,OACAC,MACAC,UACAC,WACAC,eACAC,YACAC,UACAC,SACAC,IACAC,QACAC,IACAC,QACAC,QACAC,OACAC,QAGcC,SAAStC,EAAM,EAsBpBuC,EAA4BvC,GACtB,iBAAVA,GACG,OAAVA,GACAC,OAAOK,eAAeN,KAAWC,OAAOC,WACP,OAAjCD,OAAOK,eAAeN"}